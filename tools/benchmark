#!/usr/bin/env node
'use strict';

var path = require('path');
var util = require('util');
var fs = require('fs');

var Benchmark = require('benchmark').Benchmark;
var f = require('../').format;
var sprintfjs = require('sprintf-js');

var Suite = Benchmark.Suite;
var suite = new Suite();

var REGRESS_WATERMARK = 0.1;

var currResults = {};

function getResults() {
    try {
        return require(path.join(__dirname, 'benchmark.json'));
    } catch (err) {
        return {};
    }
}

function setResults(results) {
    fs.writeFileSync(path.join(__dirname, 'benchmark.json'), JSON.stringify(results, null, 4));
}

Benchmark.options.minSamples = 100;

var member = {
    person: {
        name: 'Polly',
        wants: 'cracker'
    }
};

suite.add('  (args) util.format', function () {
    util.format('foo %s bar %s baz', '42', '42');
    util.format('foo %s bar %s baz %s zot', '42', '42', '42');
    util.format('foo %s bar %s baz %s zot %s omg',  '42', '42', '42', '42');
});

suite.add('  (args) sprintfjs.sprintf', function () {
    sprintfjs.sprintf('foo %s bar %s baz', '42', '42');
    sprintfjs.sprintf('foo %s bar %s baz %s zot', '42', '42', '42');
    sprintfjs.sprintf('foo %s bar %s baz %s zot %s omg',  '42', '42', '42', '42');
});

suite.add('! (args) f', function () {
    f('foo %s bar %s baz', '42', '42');
    f('foo %s bar %s baz %s zot', '42', '42', '42');
    f('foo %s bar %s baz %s zot %s omg',  '42', '42', '42', '42');
});

suite.add('  (kwargs) sprintfjs.sprintf', function () {
    sprintfjs.sprintf('%(name)s wants %(wants)s', member.person);
    sprintfjs.sprintf('%(person.name)s wants %(person.wants)s', member);
    sprintfjs.sprintf('%(member.person.name)s wants %(member.person.wants)s', {member: member});
});

suite.add('! (kwargs) f', function () {
    f('%(name)s wants %(wants)s', member.person);
    f('%(person.name)s wants %(person.wants)s', member);
    f('%(member.person.name)s wants %(member.person.wants)s', {member: member});
});

suite.add('  (args swapping) sprintfjs.sprintf', function () {
    sprintfjs.sprintf('%1$s', '1');
    sprintfjs.sprintf('%2$s %1$s', '1', '2');
    sprintfjs.sprintf('%3$s %2$s %1$s', '1', '2', '3');
});

suite.add('! (args swapping) f', function () {
    f('%1$s', '1');
    f('%2$s %1$s', '1', '2');
    f('%3$s %2$s %1$s', '1', '2', '3');
});

suite.on('cycle', function (event) {
    var name = event.target.name;

    if (/^\s*!/.test(name)) {
        currResults[name] = event.target.hz;
    }

    console.log(String(event.target));
});

suite.on('complete', function () {
    var prevResults = getResults();

    Object.keys(currResults).forEach(function (name) {
        var regressSize = (prevResults[name] / currResults[name]) - 1;
        if (prevResults.hasOwnProperty(name) && regressSize > REGRESS_WATERMARK) {
            throw new Error(f('Regression in "%s": %d%!', name, regressSize * 100));
        }
    });

    setResults(currResults);

    console.log();
});

suite.run({
    queued: true,
    async: true
});

function sleep(ms) {
    var start = new Date();
    while (start + ms > Date.now()) {}
}

process.on('uncaughtException', function (err) {
    process.stderr.write(err.stack);
    process.exit(1);
});
